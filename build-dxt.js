/**
 * DXT Package Builder for Google Apps Script MCP Server (ClaspÁµ±ÂêàÁâà)
 * 
 * Claude DesktopÁî®DXT„Éë„ÉÉ„Ç±„Éº„Ç∏„ÇíÁîüÊàê„Åô„Çã„Éì„É´„Éâ„Çπ„ÇØ„É™„Éó„Éà
 * ClaspÁµ±ÂêàÊ©üËÉΩ„ÇíÂê´„ÇÄÂÆåÂÖ®Áâà„ÅÆMCP„Çµ„Éº„Éê„Éº„Çí„Éë„ÉÉ„Ç±„Éº„Ç∏Âåñ
 * 
 * Author: Utakata
 * Session: google-apps-script-mcp-20250630-002
 * License: MIT
 */

import fs from 'fs';
import path from 'path';
import archiver from 'archiver';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

class DXTBuilder {
    constructor() {
        this.projectRoot = __dirname;
        this.outputDir = path.join(this.projectRoot, 'dist');
        this.dxtFileName = 'google-apps-script-mcp-v1.1.0-clasp.dxt';
        this.packageInfo = this.loadPackageInfo();
    }

    /**
     * package.json„Åã„ÇâÊÉÖÂ†±„ÇíË™≠„ÅøËæº„Åø
     */
    loadPackageInfo() {
        try {
            const packagePath = path.join(this.projectRoot, 'package.json');
            const packageData = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
            return packageData;
        } catch (error) {
            console.error('‚ùå package.jsonË™≠„ÅøËæº„Åø„Ç®„É©„Éº:', error.message);
            process.exit(1);
        }
    }

    /**
     * Âá∫Âäõ„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆÊ∫ñÂÇô
     */
    async prepareOutputDirectory() {
        try {
            if (fs.existsSync(this.outputDir)) {
                fs.rmSync(this.outputDir, { recursive: true, force: true });
            }
            fs.mkdirSync(this.outputDir, { recursive: true });
            console.log('‚úÖ Âá∫Âäõ„Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíÊ∫ñÂÇô„Åó„Åæ„Åó„Åü');
        } catch (error) {
            console.error('‚ùå Âá∫Âäõ„Éá„Ç£„É¨„ÇØ„Éà„É™Ê∫ñÂÇô„Ç®„É©„Éº:', error.message);
            throw error;
        }
    }

    /**
     * DXT„Éë„ÉÉ„Ç±„Éº„Ç∏Áî®manifest.json„ÇíÁîüÊàê
     */
    generateDXTManifest() {
        const dxtManifest = {
            schema_version: "0.1.0",
            name: this.packageInfo.name,
            version: this.packageInfo.version,
            description: this.packageInfo.description,
            main: "src/index-clasp-integrated.js", // ClaspÁµ±ÂêàÁâà„Çí„É°„Ç§„É≥„Å´Ë®≠ÂÆö
            author: this.packageInfo.author,
            license: this.packageInfo.license,
            
            // DXTÂõ∫ÊúâË®≠ÂÆö
            dxt: {
                type: "mcp-server",
                runtime: "node",
                entry_point: "src/index-clasp-integrated.js",
                node_version: ">=18.0.0",
                install_command: "npm install",
                start_command: "npm start"
            },

            // ClaspÁµ±ÂêàÊ©üËÉΩ„ÅÆ„Ç≠„É£„Éë„Éì„É™„ÉÜ„Ç£
            capabilities: {
                tools: [
                    // ClaspÁµ±Âêà„ÉÑ„Éº„É´
                    "clasp_setup",
                    "clasp_create", 
                    "clasp_clone",
                    "clasp_pull",
                    "clasp_push_and_deploy",
                    "clasp_list",
                    
                    // Êó¢Â≠ò„ÅÆGAS API„ÉÑ„Éº„É´
                    "create_gas_project",
                    "list_gas_projects",
                    "get_gas_project", 
                    "update_gas_project",
                    "create_gas_file",
                    "get_gas_file",
                    "update_gas_file",
                    "execute_gas_function",
                    "deploy_gas_webapp",
                    "manage_gas_triggers",
                    "get_gas_logs",
                    "manage_gas_libraries"
                ],
                features: [
                    "oauth2_authentication",
                    "project_management",
                    "script_execution", 
                    "deployment_automation",
                    "trigger_management",
                    "logging_monitoring",
                    "library_management",
                    "clasp_cli_integration",
                    "environment_switching",
                    "local_development"
                ]
            },

            // Áí∞Â¢ÉË¶Å‰ª∂
            requirements: {
                node: ">=18.0.0",
                npm: ">=8.0.0",
                dependencies: this.packageInfo.dependencies
            },

            // „Çª„ÉÉ„Éà„Ç¢„ÉÉ„ÉóÊÉÖÂ†±
            setup: {
                env_vars: [
                    "GOOGLE_CLIENT_ID",
                    "GOOGLE_CLIENT_SECRET",
                    "GOOGLE_REDIRECT_URI"
                ],
                instructions: [
                    "npm install „Åß„Éë„ÉÉ„Ç±„Éº„Ç∏„Çí„Ç§„É≥„Çπ„Éà„Éº„É´",
                    "Google Cloud Console„Åß„Éó„É≠„Ç∏„Çß„ÇØ„Éà„Çí‰ΩúÊàê",
                    "OAuth2Ë™çË®ºÊÉÖÂ†±„ÇíË®≠ÂÆö",
                    ".env „Éï„Ç°„Ç§„É´„ÇíË®≠ÂÆö",
                    "clasp_setup „ÉÑ„Éº„É´„ÅßCLIÁµ±Âêà„ÇíË®≠ÂÆö"
                ]
            },

            // „É°„Çø„Éá„Éº„Çø
            metadata: {
                repository: this.packageInfo.repository?.url,
                homepage: this.packageInfo.homepage,
                bugs: this.packageInfo.bugs?.url,
                keywords: this.packageInfo.keywords,
                build_date: new Date().toISOString(),
                build_version: "1.1.0-clasp"
            }
        };

        return dxtManifest;
    }

    /**
     * DXT„Éë„ÉÉ„Ç±„Éº„Ç∏„Å´Âê´„ÇÅ„Çã„Éï„Ç°„Ç§„É´„ÅÆ‰∏ÄË¶ß
     */
    getIncludeFiles() {
        return [
            // „É°„Ç§„É≥„Éï„Ç°„Ç§„É´
            'src/index-clasp-integrated.js',  // ClaspÁµ±ÂêàÁâà„Çí„É°„Ç§„É≥
            'src/index.js',                   // APIÂ∞ÇÁî®Áâà„ÇÇÂê´„ÇÅ„Çã
            'src/index-security.js',          // „Çª„Ç≠„É•„É™„ÉÜ„Ç£Áâà„ÇÇÂê´„ÇÅ„Çã
            
            // Ë™çË®ºÈñ¢ÈÄ£
            'src/auth/google-auth.js',
            
            // „Çµ„Éº„Éì„Çπ
            'src/services/gas-api.js',
            'src/services/clasp-service-es6.js',  // ES6Áâà
            'src/services/clasp-service.js',      // CommonJSÁâà
            'src/services/security.js',
            
            // „É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£
            'src/utils/logger.js',
            'src/utils/validation.js',
            'src/utils/formatters.js',
            
            // Ë®≠ÂÆö„Éï„Ç°„Ç§„É´
            'package.json',
            '.env.example',
            'README.md',
            
            // „Éâ„Ç≠„É•„É°„É≥„Éà
            'docs/',
            
            // Ë®≠ÂÆö
            'config/',
            
            // „ÉÜ„Çπ„ÉàÔºà„Ç™„Éó„Ç∑„Éß„É≥Ôºâ
            'test/'
        ];
    }

    /**
     * Èô§Â§ñ„Åô„Çã„Éï„Ç°„Ç§„É´/„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆ‰∏ÄË¶ß
     */
    getExcludePatterns() {
        return [
            '.git/**',
            '.gitignore',
            'node_modules/**',
            'dist/**',
            'build/**',
            '.env',
            '*.log',
            'coverage/**',
            '.nyc_output/**',
            'package-clasp.json',  // ‰ΩúÊ•≠Áî®„Éï„Ç°„Ç§„É´„ÅØÈô§Â§ñ
            'build-dxt.js'         // „Éì„É´„Éâ„Çπ„ÇØ„É™„Éó„ÉàËá™‰Ωì„ÅØÈô§Â§ñ
        ];
    }

    /**
     * „Éï„Ç°„Ç§„É´„ÅåÈô§Â§ñÂØæË±°„Åã„ÉÅ„Çß„ÉÉ„ÇØ
     */
    isExcluded(filePath) {
        const excludePatterns = this.getExcludePatterns();
        return excludePatterns.some(pattern => {
            const regex = new RegExp(pattern.replace(/\*\*/g, '.*').replace(/\*/g, '[^/]*'));
            return regex.test(filePath);
        });
    }

    /**
     * „Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíÂÜçÂ∏∞ÁöÑ„Å´„Ç¢„Éº„Ç´„Ç§„Éñ„Å´ËøΩÂä†
     */
    addDirectoryToArchive(archive, dirPath, basePath = '') {
        const files = fs.readdirSync(dirPath);
        
        for (const file of files) {
            const fullPath = path.join(dirPath, file);
            const relativePath = path.join(basePath, file);
            
            // Èô§Â§ñ„ÉÅ„Çß„ÉÉ„ÇØ
            if (this.isExcluded(relativePath)) {
                console.log(`‚è≠Ô∏è  Èô§Â§ñ: ${relativePath}`);
                continue;
            }
            
            const stat = fs.statSync(fullPath);
            
            if (stat.isDirectory()) {
                // „Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆÂ†¥Âêà„ÅØÂÜçÂ∏∞ÁöÑ„Å´Âá¶ÁêÜ
                this.addDirectoryToArchive(archive, fullPath, relativePath);
            } else {
                // „Éï„Ç°„Ç§„É´„ÅÆÂ†¥Âêà„ÅØ„Ç¢„Éº„Ç´„Ç§„Éñ„Å´ËøΩÂä†
                console.log(`üìÑ ËøΩÂä†: ${relativePath}`);
                archive.file(fullPath, { name: relativePath });
            }
        }
    }

    /**
     * DXT„Éë„ÉÉ„Ç±„Éº„Ç∏„Çí„Éì„É´„Éâ
     */
    async buildDXT() {
        console.log('üöÄ DXT„Éë„ÉÉ„Ç±„Éº„Ç∏„Éì„É´„ÉâÈñãÂßã (ClaspÁµ±ÂêàÁâà)');
        console.log(`üì¶ „Éê„Éº„Ç∏„Éß„É≥: ${this.packageInfo.version}`);
        console.log(`üìù Ë™¨Êòé: ${this.packageInfo.description}`);
        
        try {
            // Âá∫Âäõ„Éá„Ç£„É¨„ÇØ„Éà„É™Ê∫ñÂÇô
            await this.prepareOutputDirectory();
            
            // DXT„Éû„Éã„Éï„Çß„Çπ„ÉàÁîüÊàê
            const dxtManifest = this.generateDXTManifest();
            const manifestPath = path.join(this.outputDir, 'dxt-manifest.json');
            fs.writeFileSync(manifestPath, JSON.stringify(dxtManifest, null, 2));
            console.log('‚úÖ DXT„Éû„Éã„Éï„Çß„Çπ„Éà„ÇíÁîüÊàê„Åó„Åæ„Åó„Åü');
            
            // ZIP„Ç¢„Éº„Ç´„Ç§„Éñ‰ΩúÊàê
            const outputPath = path.join(this.outputDir, this.dxtFileName);
            const output = fs.createWriteStream(outputPath);
            const archive = archiver('zip', { zlib: { level: 9 } });
            
            // „Ç¢„Éº„Ç´„Ç§„Éñ„Ç§„Éô„É≥„ÉàË®≠ÂÆö
            archive.on('error', (err) => {
                throw err;
            });
            
            archive.on('warning', (err) => {
                if (err.code === 'ENOENT') {
                    console.warn('‚ö†Ô∏è ', err);
                } else {
                    throw err;
                }
            });
            
            archive.pipe(output);
            
            // DXT„Éû„Éã„Éï„Çß„Çπ„Éà„ÇíËøΩÂä†
            archive.file(manifestPath, { name: 'dxt-manifest.json' });
            
            // „Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éï„Ç°„Ç§„É´„ÇíËøΩÂä†
            console.log('üìÅ „Éó„É≠„Ç∏„Çß„ÇØ„Éà„Éï„Ç°„Ç§„É´„ÇíËøΩÂä†‰∏≠...');
            this.addDirectoryToArchive(archive, this.projectRoot);
            
            // „Ç¢„Éº„Ç´„Ç§„ÉñÂÆå‰∫Ü
            await archive.finalize();
            
            // Áµ±Ë®àÊÉÖÂ†±
            const stats = fs.statSync(outputPath);
            const sizeInMB = (stats.size / 1024 / 1024).toFixed(2);
            
            console.log('');
            console.log('‚úÖ DXT„Éë„ÉÉ„Ç±„Éº„Ç∏ÁîüÊàêÂÆå‰∫Ü!');
            console.log(`üì¶ „Éï„Ç°„Ç§„É´: ${this.dxtFileName}`);
            console.log(`üìè „Çµ„Ç§„Ç∫: ${sizeInMB} MB`);
            console.log(`üìÅ Âá∫ÂäõÂÖà: ${outputPath}`);
            console.log('');
            console.log('üîß ‰∏ª„Å™Ê©üËÉΩ:');
            console.log('  ‚ú® Clasp CLIÁµ±Âêà (setup/create/clone/pull/push/deploy/list)');
            console.log('  üîê Google Apps Script APIÊìç‰Ωú');
            console.log('  üöÄ „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁÆ°ÁêÜ„Éª„Éá„Éó„É≠„Ç§Ëá™ÂãïÂåñ');
            console.log('  ‚ö° „Éà„É™„Ç¨„Éº„Éª„É©„Ç§„Éñ„É©„É™ÁÆ°ÁêÜ');
            console.log('  üìä ÂÆüË°å„É≠„Ç∞„ÉªÁõ£Ë¶ñÊ©üËÉΩ');
            console.log('  üîÑ Áí∞Â¢ÉÂà•Ë®≠ÂÆöÂàáÊõø');
            console.log('');
            console.log('üìã ‰ΩøÁî®ÊñπÊ≥ï:');
            console.log('  1. Claude Desktop „Åß„Åì„ÅÆDXT„Éï„Ç°„Ç§„É´„Çí„Ç§„É≥„Éù„Éº„Éà');
            console.log('  2. MCPË®≠ÂÆö„ÅßÁí∞Â¢ÉÂ§âÊï∞„ÇíË®≠ÂÆö');
            console.log('  3. clasp_setup „ÉÑ„Éº„É´„ÅßCLIÁí∞Â¢É„Çí„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó');
            console.log('  4. ÂêÑÁ®Æ„ÉÑ„Éº„É´„ÅßGoogle Apps Script„ÇíÁÆ°ÁêÜ„ÉªÊìç‰Ωú');
            
        } catch (error) {
            console.error('‚ùå DXT„Éì„É´„Éâ„Ç®„É©„Éº:', error.message);
            throw error;
        }
    }

    /**
     * „É°„Ç§„É≥ÂÆüË°å
     */
    async run() {
        try {
            await this.buildDXT();
            process.exit(0);
        } catch (error) {
            console.error('‚ùå „Éì„É´„ÉâÂ§±Êïó:', error);
            process.exit(1);
        }
    }
}

// „É°„Ç§„É≥ÂÆüË°å
if (import.meta.url === `file://${process.argv[1]}`) {
    const builder = new DXTBuilder();
    builder.run();
}