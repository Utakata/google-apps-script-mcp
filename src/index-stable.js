/**\n * Google Apps Script MCP Server - 安定版\n * 依存関係問題を解決した安定動作版\n * \n * Author: Utakata\n */\n\nimport { Server } from '@modelcontextprotocol/sdk/server/index.js';\nimport { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js';\nimport {\n  CallToolRequestSchema,\n  ListToolsRequestSchema,\n} from '@modelcontextprotocol/sdk/types.js';\nimport fs from 'fs/promises';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nclass GoogleAppsScriptMCPServer {\n  constructor() {\n    this.server = new Server(\n      {\n        name: 'google-apps-script-mcp',\n        version: '1.1.0',\n      },\n      {\n        capabilities: {\n          tools: {},\n        },\n      }\n    );\n    \n    this.setupHandlers();\n  }\n\n  setupHandlers() {\n    this.server.setRequestHandler(ListToolsRequestSchema, async () => {\n      return {\n        tools: [\n          {\n            name: 'clasp_setup',\n            description: 'Setup Clasp CLI environment and authenticate with Google',\n            inputSchema: {\n              type: 'object',\n              properties: {\n                force: {\n                  type: 'boolean',\n                  description: 'Force re-setup even if already configured'\n                }\n              }\n            }\n          },\n          {\n            name: 'clasp_create',\n            description: 'Create a new Google Apps Script project',\n            inputSchema: {\n              type: 'object',\n              properties: {\n                title: {\n                  type: 'string',\n                  description: 'Title of the new project'\n                },\n                type: {\n                  type: 'string',\n                  enum: ['standalone', 'sheets', 'docs', 'slides', 'forms'],\n                  description: 'Type of Google Apps Script project'\n                }\n              },\n              required: ['title']\n            }\n          },\n          {\n            name: 'clasp_clone',\n            description: 'Clone an existing Google Apps Script project',\n            inputSchema: {\n              type: 'object',\n              properties: {\n                scriptId: {\n                  type: 'string',\n                  description: 'Script ID of the project to clone'\n                },\n                versionNumber: {\n                  type: 'number',\n                  description: 'Version number to clone (optional)'\n                }\n              },\n              required: ['scriptId']\n            }\n          },\n          {\n            name: 'clasp_pull',\n            description: 'Pull latest changes from Google Apps Script',\n            inputSchema: {\n              type: 'object',\n              properties: {\n                versionNumber: {\n                  type: 'number',\n                  description: 'Version number to pull (optional)'\n                }\n              }\n            }\n          },\n          {\n            name: 'clasp_push_and_deploy',\n            description: 'Push changes and deploy to Google Apps Script',\n            inputSchema: {\n              type: 'object',\n              properties: {\n                watch: {\n                  type: 'boolean',\n                  description: 'Watch for file changes and automatically push'\n                },\n                force: {\n                  type: 'boolean',\n                  description: 'Force push even if there are conflicts'\n                }\n              }\n            }\n          },\n          {\n            name: 'clasp_list',\n            description: 'List all Google Apps Script projects',\n            inputSchema: {\n              type: 'object',\n              properties: {}\n            }\n          },\n          {\n            name: 'dependency_check',\n            description: 'Check system dependencies and environment',\n            inputSchema: {\n              type: 'object',\n              properties: {\n                detailed: {\n                  type: 'boolean',\n                  description: 'Show detailed dependency information'\n                }\n              }\n            }\n          }\n        ],\n      };\n    });\n\n    this.server.setRequestHandler(CallToolRequestSchema, async (request) => {\n      switch (request.params.name) {\n        case 'dependency_check':\n          return await this.handleDependencyCheck(request.params.arguments);\n        \n        case 'clasp_setup':\n          return await this.handleClaspSetup(request.params.arguments);\n          \n        case 'clasp_create':\n          return await this.handleClaspCreate(request.params.arguments);\n          \n        case 'clasp_clone':\n          return await this.handleClaspClone(request.params.arguments);\n          \n        case 'clasp_pull':\n          return await this.handleClaspPull(request.params.arguments);\n          \n        case 'clasp_push_and_deploy':\n          return await this.handleClaspPushAndDeploy(request.params.arguments);\n          \n        case 'clasp_list':\n          return await this.handleClaspList(request.params.arguments);\n          \n        default:\n          throw new Error(`Unknown tool: ${request.params.name}`);\n      }\n    });\n  }\n\n  async handleDependencyCheck(args) {\n    try {\n      const nodeVersion = process.version;\n      const platform = process.platform;\n      const architecture = process.arch;\n      \n      // 基本的なNode.js モジュールの可用性チェック\n      const dependencies = {\n        'fs/promises': false,\n        'path': false,\n        'child_process': false,\n        'url': false\n      };\n      \n      for (const dep of Object.keys(dependencies)) {\n        try {\n          await import(dep);\n          dependencies[dep] = true;\n        } catch {\n          dependencies[dep] = false;\n        }\n      }\n      \n      // package.json の確認\n      let packageInfo = null;\n      try {\n        const packagePath = path.join(__dirname, '..', 'package.json');\n        const packageContent = await fs.readFile(packagePath, 'utf8');\n        packageInfo = JSON.parse(packageContent);\n      } catch {\n        packageInfo = { error: 'package.json not found' };\n      }\n      \n      const result = {\n        status: 'success',\n        environment: {\n          node_version: nodeVersion,\n          platform: platform,\n          architecture: architecture,\n          working_directory: __dirname\n        },\n        dependencies: dependencies,\n        package_info: args?.detailed ? packageInfo : { name: packageInfo?.name, version: packageInfo?.version },\n        timestamp: new Date().toISOString()\n      };\n      \n      return {\n        content: [\n          {\n            type: 'text',\n            text: JSON.stringify(result, null, 2)\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: 'text',\n            text: JSON.stringify({\n              status: 'error',\n              message: `依存関係チェックエラー: ${error.message}`,\n              timestamp: new Date().toISOString()\n            }, null, 2)\n          }\n        ]\n      };\n    }\n  }\n\n  async handleClaspSetup(args) {\n    try {\n      const result = {\n        status: 'info',\n        message: 'Clasp環境セットアップガイド',\n        steps: [\n          '1. Node.js 18以上がインストールされていることを確認',\n          '2. npm install -g @google/clasp でClaspをグローバルインストール',\n          '3. clasp login でGoogle認証を完了',\n          '4. Google Apps Script APIを有効化: https://script.google.com/home/usersettings'\n        ],\n        next_action: 'dependency_checkツールで環境を確認してください'\n      };\n\n      return {\n        content: [\n          {\n            type: 'text',\n            text: JSON.stringify(result, null, 2)\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: 'text',\n            text: JSON.stringify({\n              status: 'error',\n              message: `Claspセットアップエラー: ${error.message}`\n            }, null, 2)\n          }\n        ]\n      };\n    }\n  }\n\n  async handleClaspCreate(args) {\n    try {\n      const result = {\n        status: 'info',\n        message: `Google Apps Script プロジェクト作成準備`,\n        project_config: {\n          title: args.title,\n          type: args.type || 'standalone'\n        },\n        command: `clasp create --title \"${args.title}\" --type ${args.type || 'standalone'}`,\n        note: 'このコマンドをターミナルで実行してプロジェクトを作成してください'\n      };\n\n      return {\n        content: [\n          {\n            type: 'text',\n            text: JSON.stringify(result, null, 2)\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: 'text',\n            text: JSON.stringify({\n              status: 'error',\n              message: `プロジェクト作成エラー: ${error.message}`\n            }, null, 2)\n          }\n        ]\n      };\n    }\n  }\n\n  async handleClaspClone(args) {\n    try {\n      const result = {\n        status: 'info',\n        message: 'Google Apps Script プロジェクトクローン準備',\n        clone_config: {\n          script_id: args.scriptId,\n          version: args.versionNumber || 'latest'\n        },\n        command: args.versionNumber \n          ? `clasp clone ${args.scriptId} --versionNumber ${args.versionNumber}`\n          : `clasp clone ${args.scriptId}`,\n        note: 'このコマンドをターミナルで実行してプロジェクトをクローンしてください'\n      };\n\n      return {\n        content: [\n          {\n            type: 'text',\n            text: JSON.stringify(result, null, 2)\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: 'text',\n            text: JSON.stringify({\n              status: 'error',\n              message: `クローンエラー: ${error.message}`\n            }, null, 2)\n          }\n        ]\n      };\n    }\n  }\n\n  async handleClaspPull(args) {\n    try {\n      const result = {\n        status: 'info',\n        message: 'Google Apps Script プロジェクトプル準備',\n        pull_config: {\n          version: args.versionNumber || 'latest'\n        },\n        command: args.versionNumber \n          ? `clasp pull --versionNumber ${args.versionNumber}`\n          : 'clasp pull',\n        note: 'このコマンドをターミナルで実行して最新の変更を取得してください'\n      };\n\n      return {\n        content: [\n          {\n            type: 'text',\n            text: JSON.stringify(result, null, 2)\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: 'text',\n            text: JSON.stringify({\n              status: 'error',\n              message: `プルエラー: ${error.message}`\n            }, null, 2)\n          }\n        ]\n      };\n    }\n  }\n\n  async handleClaspPushAndDeploy(args) {\n    try {\n      const commands = [];\n      \n      if (args?.force) {\n        commands.push('clasp push --force');\n      } else {\n        commands.push('clasp push');\n      }\n      \n      if (args?.watch) {\n        commands.push('clasp push --watch');\n      }\n      \n      commands.push('clasp deploy');\n      \n      const result = {\n        status: 'info',\n        message: 'Google Apps Script プッシュ・デプロイ準備',\n        push_config: {\n          force: args?.force || false,\n          watch: args?.watch || false\n        },\n        commands: commands,\n        note: 'これらのコマンドをターミナルで順次実行してください'\n      };\n\n      return {\n        content: [\n          {\n            type: 'text',\n            text: JSON.stringify(result, null, 2)\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: 'text',\n            text: JSON.stringify({\n              status: 'error',\n              message: `プッシュ・デプロイエラー: ${error.message}`\n            }, null, 2)\n          }\n        ]\n      };\n    }\n  }\n\n  async handleClaspList(args) {\n    try {\n      const result = {\n        status: 'info',\n        message: 'Google Apps Script プロジェクト一覧取得',\n        command: 'clasp list',\n        note: 'このコマンドをターミナルで実行して利用可能なプロジェクト一覧を確認してください'\n      };\n\n      return {\n        content: [\n          {\n            type: 'text',\n            text: JSON.stringify(result, null, 2)\n          }\n        ]\n      };\n    } catch (error) {\n      return {\n        content: [\n          {\n            type: 'text',\n            text: JSON.stringify({\n              status: 'error',\n              message: `プロジェクト一覧エラー: ${error.message}`\n            }, null, 2)\n          }\n        ]\n      };\n    }\n  }\n\n  async run() {\n    console.log('🚀 Google Apps Script MCP Server (安定版) 起動中...');\n    \n    const transport = new StdioServerTransport();\n    await this.server.connect(transport);\n    console.log('✅ Google Apps Script MCP Server が正常に起動しました');\n  }\n}\n\n// サーバー起動\nconst server = new GoogleAppsScriptMCPServer();\nserver.run().catch(console.error);\n","numLines":408,"totalLines":408}